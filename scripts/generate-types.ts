#!/usr/bin/env node

import { execSync } from "child_process";
import { existsSync, mkdirSync } from "fs";
import { join } from "path";

const SCRIPT_DIR = __dirname;
const PROJECT_ROOT = join(SCRIPT_DIR, "..");
const TYPES_DIR = join(PROJECT_ROOT, "src", "types");
const TYPES_FILE = join(TYPES_DIR, "supabase.ts");

console.log("üîß Generating Supabase types...");

// Ensure types directory exists
if (!existsSync(TYPES_DIR)) {
  console.log("üìÅ Creating types directory...");
  mkdirSync(TYPES_DIR, { recursive: true });
}

try {
  // Generate types using Supabase CLI
  console.log("üìù Running Supabase CLI to generate types...");

  const command = `npx supabase gen types typescript --project-id ${process.env.NEXT_PUBLIC_SUPABASE_PROJECT_ID} --schema public > ${TYPES_FILE}`;

  execSync(command, {
    cwd: PROJECT_ROOT,
    stdio: "inherit",
    env: {
      ...process.env,
      SUPABASE_ACCESS_TOKEN: process.env.SUPABASE_ACCESS_TOKEN,
    },
  });

  console.log("‚úÖ Types generated successfully!");
  console.log(`üìÑ Types saved to: ${TYPES_FILE}`);

  // Add a comment at the top of the generated file
  const fileContent = `// Auto-generated by Supabase CLI
// Run 'npm run generate-types' to regenerate
// Last generated: ${new Date().toISOString()}

`;

  // Read the generated file and prepend the comment
  const fs = require("fs");
  const currentContent = fs.readFileSync(TYPES_FILE, "utf8");
  fs.writeFileSync(TYPES_FILE, fileContent + currentContent);

  console.log("üìù Added generation timestamp to types file");
} catch (error) {
  console.error("‚ùå Error generating types:", error);
  process.exit(1);
}
